<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tumo.model.dao.PortfolioDao">

	<insert id="createList" parameterType="portfolioDto" >
		 insert into portfolio(user_idx,title,content,goal) 
		 values(#{userIdx},#{title},#{content},#{goal})
	</insert>
	
	<select id="readList" parameterType="int" resultType="map" >
		 select * from portfolio where user_idx=#{userIdx}
	</select>
	
	<select id="recentPortfolio" parameterType="int" resultType="int" >
		 select portfolio_idx from portfolio where user_idx=#{userIdx} order by portfolio_idx desc limit 1;
	</select>
	
	<delete id="deleteList" parameterType="int" >
		 delete from portfolio where portfolio_idx=#{portfolioIdx}
	</delete>
	
	<insert id="createAsset" parameterType="assetDto" >
		 insert into asset(portfolio_idx,stock_code,quantity,price,goal) 
		 values(#{portfolioIdx},#{stock_code},#{quantity},#{price},#{goal})
	</insert>
	<select id="readAsset" parameterType="int" resultType="map" >
		 select * from asset where portfolio_idx=#{portfolioIdx}
	</select>
	<delete id="deleteAsset" parameterType="int" >
		 delete from asset where asset_idx=#{assetIdx}
	</delete>
	
	<select id="readFeedList" parameterType="Map" resultType="Map" >
		select portfolio.* ,nickname from portfolio join user on portfolio.user_idx= user.user_idx
		where portfolio.user_idx in(select following_idx from following where following.user_idx=${userIdx})  or portfolio.user_idx=${userIdx} limit ${pageNum},5
	</select>
	
	<select id="searchPortfolio" parameterType="Map" resultType="Map" >
		select portfolio.* ,nickname from portfolio join user on portfolio.user_idx= user.user_idx where title like "%${searchContent}%" or content like "%${searchContent}%"  or  nickname like "%${searchContent}%" limit ${pageNum},5
	</select>
	
	<update id="updateRank">
		UPDATE user A
		    SET A.rank = (
		   SELECT B.ranking 
		       FROM (
		                     select rank() over(order by (sum(quantity*cp.price)/sum(quantity*a.price))) as ranking, u.user_idx 
		                     from asset as a join company_price as cp on stock_code=code join portfolio as p on p.portfolio_idx=a.portfolio_idx
		                      join user as u on u.user_idx=p.user_idx group by u.user_idx
		                    )B
		    WHERE 
		    A.user_idx= B.user_idx)
	</update>
	
	<update id="updateYield">
		UPDATE user A
		    SET A.yield = (
		   SELECT B.yield 
		       FROM (
                     select  (sum(quantity*cp.price)/sum(quantity*a.price)) as yield, u.user_idx from 
                     asset as a join company_price as cp on stock_code=code join portfolio as p on p.portfolio_idx=a.portfolio_idx
                      join user as u on u.user_idx=p.user_idx group by u.user_idx
                    )B
			    WHERE 
			    A.user_idx= B.user_idx
			    )
	</update>
</mapper>